{"version":3,"sources":["vendor/codemirror.css","atoms.js","Editor.js","App.js","reportWebVitals.js","index.js"],"names":["codeList","atom","key","default","Editor","editorRef","useRef","copyContainerRef","setCodeList","useSetRecoilState","atoms","codemirrorRef","useEffect","current","window","CodeMirror","fromTextArea","lineNumbers","mode","toTextArea","onClickCopy","useCallback","container","type","plainType","textHtml","stylecss","getInnerHTML","blob","Blob","plainBlob","getValue","navigator","clipboard","write","ClipboardItem","toast","list","concat","code","getElementsByClassName","className","ref","cols","id","name","rows","defaultValue","onClick","autoClose","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"4OAAe,u2R,OCEFA,EAAWC,YAAK,CACzBC,IAAK,WACLC,QAAS,K,qBC+EEC,MAzEf,WACI,IAAMC,EAAYC,iBAAO,MACnBC,EAAmBD,iBAAO,MAC1BE,EAAcC,YAAkBC,GAChCC,EAAgBL,iBAAO,MAE7BM,qBAAU,WAMN,OALAD,EAAcE,QAAUC,OAAOC,WAAWC,aAAaX,EAAUQ,QAAS,CACtEI,aAAa,EACbC,KAAM,QAGH,WACHP,EAAcE,QAAQM,gBAE3B,IAGH,IAAMC,EAAcC,uBAAY,WAAO,IAAD,EAC5BC,EAAYf,EAAiBM,QAC7BU,EAAO,YACPC,EAAY,aACZC,EAAQ,0JAKFC,EALE,4GASAJ,EAAUK,eATV,4DAcRC,EAAO,IAAIC,KAAK,CAACJ,GAAW,CAAEF,SAC9BO,EAAY,IAAID,KAAK,CAAElB,EAAcE,QAAQkB,YAAc,CAAER,KAAMC,IACzEQ,UAAUC,UAAUC,MAAM,CACtB,IAAIpB,OAAOqB,eAAX,mBACKZ,EAAOK,GADZ,cAEKJ,EAAYM,GAFjB,MAKJM,YAAM,oBAEN5B,GAAY,SAAC6B,GACT,OAAOA,EAAKC,OAAO,CACfC,KAAMjB,EAAUkB,uBAAuB,cAAc,GAAGb,sBAGjE,IAEH,OACI,sBAAKc,UAAU,WAAf,UACI,gCACMf,IAEN,qBAAKgB,IAAKnC,EAAV,SACI,qBAAKkC,UAAU,cAAf,SACI,0BAAUE,KAAK,KAAKC,GAAG,GAAGC,KAAK,GAAGC,KAAK,KAAKJ,IAAKrC,EAAW0C,aAAa,4BAIjF,8BACI,wBAAQC,QAAS5B,EAAjB,sBAGJ,cAAC,IAAD,CAAgB6B,UAAW,U,MC7DxBC,MAdf,WACE,OACI,sBAAKT,UAAU,MAAf,UACI,8CACA,yBAAQA,UAAU,aAAlB,UACI,qBAAKA,UAAU,OAAf,SACI,cAAC,EAAD,MAEJ,qBAAKA,UAAU,iBCCdU,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACL,cAAC,IAAD,UACI,cAAC,EAAD,MAGJC,SAASC,eAAe,SAM5BZ,M","file":"static/js/main.09703705.chunk.js","sourcesContent":["export default \"/* BASICS */\\n\\n.CodeMirror {\\n  /* Set height, width, borders, and global font properties here */\\n  font-family: monospace;\\n  height: 300px;\\n  color: black;\\n  direction: ltr;\\n}\\n\\n/* PADDING */\\n\\n.CodeMirror-lines {\\n  padding: 4px 0; /* Vertical padding around content */\\n}\\n.CodeMirror pre.CodeMirror-line,\\n.CodeMirror pre.CodeMirror-line-like {\\n  padding: 0 4px; /* Horizontal padding of content */\\n}\\n\\n.CodeMirror-scrollbar-filler, .CodeMirror-gutter-filler {\\n  background-color: white; /* The little square between H and V scrollbars */\\n}\\n\\n/* GUTTER */\\n\\n.CodeMirror-gutters {\\n  border-right: 1px solid #ddd;\\n  background-color: #f7f7f7;\\n  white-space: nowrap;\\n}\\n.CodeMirror-linenumbers {}\\n.CodeMirror-linenumber {\\n  padding: 0 3px 0 5px;\\n  min-width: 20px;\\n  text-align: right;\\n  color: #999;\\n  white-space: nowrap;\\n}\\n\\n.CodeMirror-guttermarker { color: black; }\\n.CodeMirror-guttermarker-subtle { color: #999; }\\n\\n/* CURSOR */\\n\\n.CodeMirror-cursor {\\n  border-left: 1px solid black;\\n  border-right: none;\\n  width: 0;\\n}\\n/* Shown when moving in bi-directional text */\\n.CodeMirror div.CodeMirror-secondarycursor {\\n  border-left: 1px solid silver;\\n}\\n.cm-fat-cursor .CodeMirror-cursor {\\n  width: auto;\\n  border: 0 !important;\\n  background: #7e7;\\n}\\n.cm-fat-cursor div.CodeMirror-cursors {\\n  z-index: 1;\\n}\\n.cm-fat-cursor-mark {\\n  background-color: rgba(20, 255, 20, 0.5);\\n  -webkit-animation: blink 1.06s steps(1) infinite;\\n  -moz-animation: blink 1.06s steps(1) infinite;\\n  animation: blink 1.06s steps(1) infinite;\\n}\\n.cm-animate-fat-cursor {\\n  width: auto;\\n  -webkit-animation: blink 1.06s steps(1) infinite;\\n  -moz-animation: blink 1.06s steps(1) infinite;\\n  animation: blink 1.06s steps(1) infinite;\\n  background-color: #7e7;\\n}\\n@-moz-keyframes blink {\\n  0% {}\\n  50% { background-color: transparent; }\\n  100% {}\\n}\\n@-webkit-keyframes blink {\\n  0% {}\\n  50% { background-color: transparent; }\\n  100% {}\\n}\\n@keyframes blink {\\n  0% {}\\n  50% { background-color: transparent; }\\n  100% {}\\n}\\n\\n/* Can style cursor different in overwrite (non-insert) mode */\\n.CodeMirror-overwrite .CodeMirror-cursor {}\\n\\n.cm-tab { display: inline-block; text-decoration: inherit; }\\n\\n.CodeMirror-rulers {\\n  position: absolute;\\n  left: 0; right: 0; top: -50px; bottom: 0;\\n  overflow: hidden;\\n}\\n.CodeMirror-ruler {\\n  border-left: 1px solid #ccc;\\n  top: 0; bottom: 0;\\n  position: absolute;\\n}\\n\\n/* DEFAULT THEME */\\n\\n.cm-s-default .cm-header {color: blue;}\\n.cm-s-default .cm-quote {color: #090;}\\n.cm-negative {color: #d44;}\\n.cm-positive {color: #292;}\\n.cm-header, .cm-strong {font-weight: bold;}\\n.cm-em {font-style: italic;}\\n.cm-link {text-decoration: underline;}\\n.cm-strikethrough {text-decoration: line-through;}\\n\\n.cm-s-default .cm-keyword {color: #708;}\\n.cm-s-default .cm-atom {color: #219;}\\n.cm-s-default .cm-number {color: #164;}\\n.cm-s-default .cm-def {color: #00f;}\\n.cm-s-default .cm-variable,\\n.cm-s-default .cm-punctuation,\\n.cm-s-default .cm-property,\\n.cm-s-default .cm-operator {}\\n.cm-s-default .cm-variable-2 {color: #05a;}\\n.cm-s-default .cm-variable-3, .cm-s-default .cm-type {color: #085;}\\n.cm-s-default .cm-comment {color: #a50;}\\n.cm-s-default .cm-string {color: #a11;}\\n.cm-s-default .cm-string-2 {color: #f50;}\\n.cm-s-default .cm-meta {color: #555;}\\n.cm-s-default .cm-qualifier {color: #555;}\\n.cm-s-default .cm-builtin {color: #30a;}\\n.cm-s-default .cm-bracket {color: #997;}\\n.cm-s-default .cm-tag {color: #170;}\\n.cm-s-default .cm-attribute {color: #00c;}\\n.cm-s-default .cm-hr {color: #999;}\\n.cm-s-default .cm-link {color: #00c;}\\n\\n.cm-s-default .cm-error {color: #f00;}\\n.cm-invalidchar {color: #f00;}\\n\\n.CodeMirror-composing { border-bottom: 2px solid; }\\n\\n/* Default styles for common addons */\\n\\ndiv.CodeMirror span.CodeMirror-matchingbracket {color: #0b0;}\\ndiv.CodeMirror span.CodeMirror-nonmatchingbracket {color: #a22;}\\n.CodeMirror-matchingtag { background: rgba(255, 150, 0, .3); }\\n.CodeMirror-activeline-background {background: #e8f2ff;}\\n\\n/* STOP */\\n\\n/* The rest of this file contains styles related to the mechanics of\\n   the editor. You probably shouldn't touch them. */\\n\\n.CodeMirror {\\n  position: relative;\\n  overflow: hidden;\\n  background: white;\\n}\\n\\n.CodeMirror-scroll {\\n  overflow: scroll !important; /* Things will break if this is overridden */\\n  /* 50px is the magic margin used to hide the element's real scrollbars */\\n  /* See overflow: hidden in .CodeMirror */\\n  margin-bottom: -50px; margin-right: -50px;\\n  padding-bottom: 50px;\\n  height: 100%;\\n  outline: none; /* Prevent dragging from highlighting the element */\\n  position: relative;\\n}\\n.CodeMirror-sizer {\\n  position: relative;\\n  border-right: 50px solid transparent;\\n}\\n\\n/* The fake, visible scrollbars. Used to force redraw during scrolling\\n   before actual scrolling happens, thus preventing shaking and\\n   flickering artifacts. */\\n.CodeMirror-vscrollbar, .CodeMirror-hscrollbar, .CodeMirror-scrollbar-filler, .CodeMirror-gutter-filler {\\n  position: absolute;\\n  z-index: 6;\\n  display: none;\\n  outline: none;\\n}\\n.CodeMirror-vscrollbar {\\n  right: 0; top: 0;\\n  overflow-x: hidden;\\n  overflow-y: scroll;\\n}\\n.CodeMirror-hscrollbar {\\n  bottom: 0; left: 0;\\n  overflow-y: hidden;\\n  overflow-x: scroll;\\n}\\n.CodeMirror-scrollbar-filler {\\n  right: 0; bottom: 0;\\n}\\n.CodeMirror-gutter-filler {\\n  left: 0; bottom: 0;\\n}\\n\\n.CodeMirror-gutters {\\n  position: absolute; left: 0; top: 0;\\n  min-height: 100%;\\n  z-index: 3;\\n}\\n.CodeMirror-gutter {\\n  white-space: normal;\\n  height: 100%;\\n  display: inline-block;\\n  vertical-align: top;\\n  margin-bottom: -50px;\\n}\\n.CodeMirror-gutter-wrapper {\\n  position: absolute;\\n  z-index: 4;\\n  background: none !important;\\n  border: none !important;\\n}\\n.CodeMirror-gutter-background {\\n  position: absolute;\\n  top: 0; bottom: 0;\\n  z-index: 4;\\n}\\n.CodeMirror-gutter-elt {\\n  position: absolute;\\n  cursor: default;\\n  z-index: 4;\\n}\\n.CodeMirror-gutter-wrapper ::selection { background-color: transparent }\\n.CodeMirror-gutter-wrapper ::-moz-selection { background-color: transparent }\\n\\n.CodeMirror-lines {\\n  cursor: text;\\n  min-height: 1px; /* prevents collapsing before first draw */\\n}\\n.CodeMirror pre.CodeMirror-line,\\n.CodeMirror pre.CodeMirror-line-like {\\n  /* Reset some styles that the rest of the page might have set */\\n  -moz-border-radius: 0; -webkit-border-radius: 0; border-radius: 0;\\n  border-width: 0;\\n  background: transparent;\\n  font-family: inherit;\\n  font-size: inherit;\\n  margin: 0;\\n  white-space: pre;\\n  word-wrap: normal;\\n  line-height: inherit;\\n  color: inherit;\\n  z-index: 2;\\n  position: relative;\\n  overflow: visible;\\n  -webkit-tap-highlight-color: transparent;\\n  -webkit-font-variant-ligatures: contextual;\\n  font-variant-ligatures: contextual;\\n}\\n.CodeMirror-wrap pre.CodeMirror-line,\\n.CodeMirror-wrap pre.CodeMirror-line-like {\\n  word-wrap: break-word;\\n  white-space: pre-wrap;\\n  word-break: normal;\\n}\\n\\n.CodeMirror-linebackground {\\n  position: absolute;\\n  left: 0; right: 0; top: 0; bottom: 0;\\n  z-index: 0;\\n}\\n\\n.CodeMirror-linewidget {\\n  position: relative;\\n  z-index: 2;\\n  padding: 0.1px; /* Force widget margins to stay inside of the container */\\n}\\n\\n.CodeMirror-widget {}\\n\\n.CodeMirror-rtl pre { direction: rtl; }\\n\\n.CodeMirror-code {\\n  outline: none;\\n}\\n\\n/* Force content-box sizing for the elements where we expect it */\\n.CodeMirror-scroll,\\n.CodeMirror-sizer,\\n.CodeMirror-gutter,\\n.CodeMirror-gutters,\\n.CodeMirror-linenumber {\\n  -moz-box-sizing: content-box;\\n  box-sizing: content-box;\\n}\\n\\n.CodeMirror-measure {\\n  position: absolute;\\n  width: 100%;\\n  height: 0;\\n  overflow: hidden;\\n  visibility: hidden;\\n}\\n\\n.CodeMirror-cursor {\\n  position: absolute;\\n  pointer-events: none;\\n}\\n.CodeMirror-measure pre { position: static; }\\n\\ndiv.CodeMirror-cursors {\\n  visibility: hidden;\\n  position: relative;\\n  z-index: 3;\\n}\\ndiv.CodeMirror-dragcursors {\\n  visibility: visible;\\n}\\n\\n.CodeMirror-focused div.CodeMirror-cursors {\\n  visibility: visible;\\n}\\n\\n.CodeMirror-selected { background: #d9d9d9; }\\n.CodeMirror-focused .CodeMirror-selected { background: #d7d4f0; }\\n.CodeMirror-crosshair { cursor: crosshair; }\\n.CodeMirror-line::selection, .CodeMirror-line > span::selection, .CodeMirror-line > span > span::selection { background: #d7d4f0; }\\n.CodeMirror-line::-moz-selection, .CodeMirror-line > span::-moz-selection, .CodeMirror-line > span > span::-moz-selection { background: #d7d4f0; }\\n\\n.cm-searching {\\n  background-color: #ffa;\\n  background-color: rgba(255, 255, 0, .4);\\n}\\n\\n/* Used to force a border model for a node */\\n.cm-force-border { padding-right: .1px; }\\n\\n@media print {\\n  /* Hide the cursor when printing */\\n  .CodeMirror div.CodeMirror-cursors {\\n    visibility: hidden;\\n  }\\n}\\n\\n/* See issue #2901 */\\n.cm-tab-wrap-hack:after { content: ''; }\\n\\n/* Help users use markselection to safely style text background */\\nspan.CodeMirror-selectedtext { background: none; }\\n\";","import { atom } from 'recoil';\n\nexport const codeList = atom({\n    key: 'codeList',\n    default: []\n});\n","/* eslint-disable import/no-webpack-loader-syntax */\nimport React, { useRef, useEffect, useCallback } from 'react';\nimport stylecss from '!!raw-loader!./vendor/codemirror.css';\nimport { ToastContainer, toast } from 'react-toastify';\nimport { useSetRecoilState } from 'recoil';\nimport * as atoms from './atoms';\nimport 'react-toastify/dist/ReactToastify.css';\nimport './editor.css';\n\n\nfunction Editor() {\n    const editorRef = useRef(null);\n    const copyContainerRef = useRef(null);\n    const setCodeList = useSetRecoilState(atoms.codeList);\n    const codemirrorRef = useRef(null);\n\n    useEffect(() => {\n        codemirrorRef.current = window.CodeMirror.fromTextArea(editorRef.current, {\n            lineNumbers: false,\n            mode: \"jsx\"\n        });\n\n        return () => {\n            codemirrorRef.current.toTextArea();\n        }\n    }, []);\n\n\n    const onClickCopy = useCallback(() => {\n        const container = copyContainerRef.current;\n        const type = \"text/html\";\n        const plainType = \"text/plain\";\n        const textHtml = (`\n            <html lang=\"en\">\n                <head>\n                    <meta charset=\"UTF-8\"/>\n                 <style>\n                 ${ stylecss }\n                </style>\n                </head>\n                <body>\n                    ${container.getInnerHTML()}\n                </body>\n            </html>\n        `);\n\n        const blob = new Blob([textHtml], { type })\n        const plainBlob = new Blob([ codemirrorRef.current.getValue() ], { type: plainType});\n        navigator.clipboard.write([\n            new window.ClipboardItem({\n                [type]: blob,\n                [plainType]: plainBlob\n            })\n        ]);\n        toast('Copy successed !');\n\n        setCodeList((list) => {\n            return list.concat({\n                code: container.getElementsByClassName('CodeMirror')[0].getInnerHTML()\n            });\n        });\n    }, []);\n\n    return (\n        <div className=\"m-editor\">\n            <style>\n                { stylecss }\n            </style>\n            <div ref={copyContainerRef}>\n                <div className=\"code-editor\">\n                    <textarea cols=\"30\" id=\"\" name=\"\" rows=\"10\" ref={editorRef} defaultValue=\"function hello() {}\">\n                    </textarea>\n                </div>\n            </div>\n            <div>\n                <button onClick={onClickCopy}>Copy !</button>\n            </div>\n\n            <ToastContainer autoClose={2000}></ToastContainer>\n        </div>\n    );\n}\n\nexport default Editor;\n","import Editor from './Editor';\nimport './App.css';\n\nfunction App() {\n  return (\n      <div className=\"App\">\n          <h1>Copy My Code</h1>\n          <header className=\"App-header\">\n              <div className=\"left\">\n                  <Editor />\n              </div>\n              <div className=\"right\"></div>\n          </header>\n      </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { RecoilRoot } from 'recoil';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <RecoilRoot>\n        <App />\n    </RecoilRoot>\n    ,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}